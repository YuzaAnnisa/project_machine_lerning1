# -*- coding: utf-8 -*-
"""submission.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UuLea0eLpYGiu3Ja0PbzJSb91n1WbuG9
"""

import tensorflow as tf

!mkdir -p rockpaperscissor_project

!wget --no-check-certificate \
  https://dicodingacademy.blob.core.windows.net/picodiploma/ml_pemula_academy/rockpaperscissors.zip \
  -O /content/rockpaperscissor_project/rockpaperscissors.zip

import zipfile,os
local_zip = '/content/rockpaperscissor_project/rockpaperscissors.zip'
zip_ref = zipfile.ZipFile(local_zip, 'r')
zip_ref.extractall('/content/rockpaperscissor_project')
zip_ref.close()
 
base_dir = '/content/rockpaperscissor_project/rockpaperscissors/rps-cv-images'

os.listdir(base_dir)

from tensorflow.keras.preprocessing.image import ImageDataGenerator
 
train_datagen = ImageDataGenerator(
                    rescale=1./255,
                    rotation_range=20,
                    horizontal_flip=True,
                    shear_range = 0.2,
                    fill_mode = 'wrap',
                    validation_split = 0.4)

train_generator = train_datagen.flow_from_directory(
        base_dir,
        target_size=(150, 150),
        #class_mode = 'sparse',
        shuffle = True,
        subset = 'training'
        )
 
validation_generator = train_datagen.flow_from_directory(
        base_dir,
        target_size=(150, 150),
        #class_mode='sparse',
        subset = 'validation')

model = tf.keras.models.Sequential([
    tf.keras.layers.Conv2D(32, (3,3), activation='relu', input_shape=(150, 150, 3)),
    tf.keras.layers.MaxPooling2D(2, 2),
    tf.keras.layers.Conv2D(64, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Conv2D(128, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Conv2D(128, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(512, activation='relu'),
    tf.keras.layers.Dense(3, activation='softmax')
])

class akurasi_Callback(tf.keras.callbacks.Callback): 
    def on_epoch_end(self, epoch, logs={}): 
        if(logs.get('accuracy') > 0.96 and logs.get('val_accuracy') > 0.96):
            print("\nkreteria terpenuhi, stop!") 
            self.model.stop_training = True 
 
callbacks = akurasi_Callback()

model.compile(loss='categorical_crossentropy',
              optimizer=tf.optimizers.Adam(),
              metrics=['accuracy'])

model.fit(
    train_generator,
    steps_per_epoch = 25,
    epochs = 20,
    validation_data = validation_generator,
    validation_steps = 5,
    verbose =2,
    callbacks=[callbacks]
    )

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
from google.colab import files
from keras.preprocessing import image
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
# %matplotlib inline
 
uploaded = files.upload()
 
for fn in uploaded.keys():
 
  # predicting images
  path = fn
  img = image.load_img(path, target_size=(150,150))
  imgplot = plt.imshow(img)
  x = image.img_to_array(img)
  x = np.expand_dims(x, axis=0)
 
  images = np.vstack([x])
  classes = model.predict(images, batch_size=10)
  # output_class = np.argmax(classes)
  print(fn)
  if classes[0][0]==1:
    print('paper')
  elif classes[0][1]==1:
      print('rock')
  elif classes[0][2]==1:
      print('scissors')

"""DATA DIRI


Nama : Mardatilla Annisa.
Email : mardatilla.annisa96@gmail.com
Phone : 081278840106
Kota : Lampung
"""